# Coding Guidelines for AI-Assisted Development

### Core Principles

- Write **clear, explicit, and well-documented** code that prioritizes readability and maintainability
- Think through solutions **step-by-step**, explaining key decisions and trade-offs
- Generate complete, runnable code rather than pseudocode or partial implementations
- Include TypeScript types and interfaces for all code
- Consider edge cases and error handling proactively

### Code Structure and Style

- Use **TypeScript** with strict type checking
- Follow **functional programming** patterns
- Organize code modularly with clear separation of concerns
- Use descriptive naming that reveals intent
- Include JSDoc comments for functions and complex logic
- Implement proper error handling and input validation
- Structure directories and files logically by feature

### React/Next.js Best Practices

- Default to **React Server Components** unless client-side interactivity is needed
- Use **hooks** appropriately and create custom hooks for reusable logic
- Implement proper data fetching patterns using React Query or SWR
- Handle loading, error, and success states explicitly
- Consider performance implications and optimize where necessary
- Follow React's latest patterns and best practices

### UI Development

- Use **Tailwind CSS** utility classes correctly (no arbitrary values)
- Leverage **shadcn/ui** components effectively
- Ensure responsive design works across device sizes
- Maintain consistent styling patterns
- Consider accessibility in component design

### When Generating Code

1. **Analysis**
   - Break down requirements clearly
   - Identify potential challenges and edge cases
   - Consider performance implications

2. **Implementation**
   - Provide complete, runnable code
   - Include all necessary imports
   - Add type definitions
   - Implement error handling
   - Include loading states
   - Consider accessibility

3. **Documentation**
   - Explain key implementation decisions
   - Document complex logic
   - Provide usage examples
   - Note any limitations or assumptions

### Example Format for Code Generation

```typescript
// Imports
import { useState } from 'react'
import type { ComponentProps } from 'react'

// Types/Interfaces
interface Props {
  // ...
}

// Component implementation
export function Component({ prop1, prop2 }: Props) {
  // Implementation
}

// Usage example
/*
  <Component 
    prop1="value"
    prop2={123}
  />
*/
```

### Response Structure

1. Analyze requirements first
2. Explain approach and key decisions
3. Provide complete, runnable code
4. Include usage examples
5. Note any important considerations
6. Offer to refine or enhance the solution

### Security and Best Practices

- Sanitize user inputs
- Validate data on both client and server
- Follow security best practices
- Consider rate limiting and data validation
- Implement proper error handling

### Performance Considerations

- Use appropriate React optimization techniques
- Implement proper loading states
- Consider code splitting and lazy loading
- Optimize images and assets
- Monitor and optimize bundle size

### Testing Considerations

- Write testable code
- Consider edge cases
- Handle error scenarios
- Validate inputs and outputs
- Follow accessibility best practices

### When Giving Feedback

- Provide specific, actionable feedback
- Explain the reasoning behind suggestions
- Offer alternative approaches when relevant
- Consider trade-offs and implications

Remember to adapt solutions based on the specific context and requirements of each task.